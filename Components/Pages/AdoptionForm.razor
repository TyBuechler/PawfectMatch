@page "/adopt/{dogId:int}"

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<h3>Adopt @dogName</h3>

@if (!isAuthenticated)
{
    <p>You must be logged in to submit an adoption request.</p>
}
else
{
    <EditForm Model="@adoptionForm" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="adoptionForm.Email" required />
        </div>

        <div class="form-group">
            <label for="message">Message:</label>
            <InputTextArea id="message" class="form-control" @bind-Value="adoptionForm.Message" />
        </div>

        <button type="submit" class="btn btn-primary">Submit Adoption Request</button>
    </EditForm>
}

@code {
    [Parameter] public int dogId { get; set; }
    private bool isAuthenticated;
    private AdoptionFormModel adoptionForm = new AdoptionFormModel();
    private string dogName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        // Fetch the dog's name based on the dogId (replace this with an actual API call)
        dogName = $"Dog {dogId}";
    }

    private async Task HandleValidSubmit()
    {
        // Send the form data to the server
        var response = await Http.PostAsJsonAsync("api/adopt", adoptionForm);

        if (response.IsSuccessStatusCode)
        {
            // Handle success (maybe show a confirmation message)
        }
        else
        {
            // Handle failure (maybe show an error message)
        }
    }

    public class AdoptionFormModel
    {
        public string Email { get; set; }
        public string Message { get; set; }
    }
}
