@page "/dogs/delete"
@using Microsoft.EntityFrameworkCore
@using PawfectMatch.Components.Pages.Models
@inject IDbContextFactory<PawfectMatch.Data.PawfectMatchContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Dog</h2>
    <hr />
    @if (dog is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@dog.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Breed</dt>
            <dd class="col-sm-10">@dog.Breed</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@dog.Age</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Size</dt>
            <dd class="col-sm-10">@dog.Size</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsAvailable</dt>
            <dd class="col-sm-10">@dog.IsAvailable</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MedRecords</dt>
            <dd class="col-sm-10">@dog.MedRecords</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PrevHistory</dt>
            <dd class="col-sm-10">@dog.PrevHistory</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@dog.ImageUrl</dd>
        </dl>
        <EditForm method="post" Model="dog" OnValidSubmit="DeleteDog" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(dog is null)">Delete</button> |
            <a href="/dogdatabase">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Dog? dog;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        dog = await context.Dog.FirstOrDefaultAsync(m => m.Id == Id);

        if (dog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Dog.Remove(dog!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/dogdatabase");
    }
}
