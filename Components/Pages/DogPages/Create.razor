@page "/dogs/create"
@using Microsoft.EntityFrameworkCore
@using PawfectMatch.Components.Pages.Models
@inject IDbContextFactory<PawfectMatch.Data.PawfectMatchContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Dog</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Dog" OnValidSubmit="AddDog" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Dog.Name" class="form-control" /> 
                <ValidationMessage For="() => Dog.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="breed" class="form-label">Breed:</label> 
                <InputText id="breed" @bind-Value="Dog.Breed" class="form-control" /> 
                <ValidationMessage For="() => Dog.Breed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label> 
                <InputNumber id="age" @bind-Value="Dog.Age" class="form-control" /> 
                <ValidationMessage For="() => Dog.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="size" class="form-label">Size:</label> 
                <InputNumber id="size" @bind-Value="Dog.Size" class="form-control" /> 
                <ValidationMessage For="() => Dog.Size" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isavailable" class="form-label">IsAvailable:</label> 
                <InputCheckbox id="isavailable" @bind-Value="Dog.IsAvailable" class="form-check-input" /> 
                <ValidationMessage For="() => Dog.IsAvailable" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="medrecords" class="form-label">MedRecords:</label> 
                <InputText id="medrecords" @bind-Value="Dog.MedRecords" class="form-control" /> 
                <ValidationMessage For="() => Dog.MedRecords" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="prevhistory" class="form-label">PrevHistory:</label> 
                <InputText id="prevhistory" @bind-Value="Dog.PrevHistory" class="form-control" /> 
                <ValidationMessage For="() => Dog.PrevHistory" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="imageupload" class="form-label">Upload Image:</label>
                <InputFile id="imageupload" OnChange="HandleImageUpload" class="form-control" />
                <ValidationMessage For="() => Dog.ImageUrl" class="text-danger" />
            </div>

            @if (!string.IsNullOrEmpty(Dog.ImageUrl))
            {
                <img src="@Dog.ImageUrl" alt="Dog Image" style="width:200px; height:200px; margin-top:10px;" />

            }


            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/dogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Dog Dog { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Dog.Add(Dog);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/dogdatabase");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Set the directory for saving uploaded files
            var uploadPath = Path.Combine("wwwroot", "images");
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(uploadPath, fileName);

            // Ensure the directory exists
            if (!Directory.Exists(uploadPath))
            {
                Directory.CreateDirectory(uploadPath);
            }

            // Save the file to the server
            await using var stream = File.Create(filePath);
            await file.OpenReadStream().CopyToAsync(stream);

            // Set the relative path for the image
            Dog.ImageUrl = $"/images/{fileName}"; 

        }
    }



}
