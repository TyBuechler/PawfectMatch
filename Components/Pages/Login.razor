@page "/Login"
@using PawfectMatch.Components.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRunTime

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <h3 style="font-weight:bold; color:purple">Book Stores Login</h3>
    </div>

    <div class="row">
        <div class="col-12">
            <input class="form-control" @bind="user.EmailAddress" placeholder="email address" />
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <input type="password" class="form-control" @bind="user.Password" placeholder="password" />
        </div>
    </div>

    <div class="row">
        <div class="col-6">
            <input type="submit" class="btn btn-primary form-control" value="Login" />
        </div>
        <div class="col-6">
            <a href="/signup" class="form-control text-center">Sign up</a>
        </div>
    </div>

    <div class="row">
        <div class="col-12" style="text-align:left; font-weight:bold">
            <span>@LoginMesssage</span>
        </div>
    </div>
</EditForm>

@code {
    private User user = new User();
    public string LoginMesssage { get; set; }
    ClaimsPrincipal claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    // Simple validation method - no async method required
    private void ValidateUser()
    {
        // Example of hardcoded credentials
        if (user.EmailAddress == "philip.cramer@gmail.com" && user.Password == "philip.cramer")
        {
            // In a real scenario, you would authenticate and set the claims here
            // For this example, we'll redirect directly
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            LoginMesssage = "Invalid credentials. Please try again.";
        }
    }

    protected async override Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/index");
        }
    }
}
