@page "/dogsearch"
@using PawfectMatch.Components.Pages.Models
@using PawfectMatch.Components.Services
@using PawfectMatch.Components.Layout
@using PawfectMatch.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject PawfectMatchContext DbContext
@rendermode InteractiveServer

<PageTitle>Dog Search</PageTitle>

<h1>Dogs Available for Adoption</h1>

<!-- Dropdown for Breed Filter -->
<div>
    <label for="breedFilter">Filter by Breed:</label>
    <select id="breedFilter" @onchange="FilterDogs">
        <option value="">All Breeds</option>
        @foreach (var breed in breeds)
        {
            <option value="@breed">@breed</option>
        }
    </select>
</div>

<!-- Dogs List -->
<ul>
    @foreach (var dog in filteredDogs)
    {
        <li>
            <img src="@dog.ImageUrl" alt="@dog.Name" style="height:200px;" />
            <p>Name: @dog.Name</p>
            <p>Breed: @dog.Breed</p>
            <p>Age: @dog.Age</p>
            <p>Size in pounds: @dog.Size</p>
            <button @onclick="() => NavigateToDetails(dog.Id)" style="margin-bottom:20px">View Dog</button>
        </li>
    }
</ul>

@code {
    private List<Dog> filteredDogs = new();
    private List<string> breeds = new();
    private string selectedBreed = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch all available breeds from the database
        breeds = await DbContext.Dog
            .AsNoTracking()
            .Where(d => d.IsAvailable)
            .Select(d => d.Breed)
            .Distinct()
            .ToListAsync();

        // Fetch all available dogs initially
        await LoadFilteredDogsAsync();
    }

    private async Task LoadFilteredDogsAsync()
    {
        // Query the database for dogs based on the selected breed
        IQueryable<Dog> query = DbContext.Dog.AsNoTracking();

        if (!string.IsNullOrEmpty(selectedBreed))
        {
            query = query.Where(d => d.Breed == selectedBreed);
        }

        filteredDogs = await query
            .Where(d => d.IsAvailable) // Include only available dogs
            .ToListAsync();
    }

    private async Task FilterDogs(ChangeEventArgs e)
    {
        selectedBreed = e.Value?.ToString();
        await LoadFilteredDogsAsync();
    }

    private void NavigateToDetails(int id)
    {
        Navigation.NavigateTo($"/dogdetails/{id}");
    }
}
