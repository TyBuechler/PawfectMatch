@page "/dogsearch"
@using PawfectMatch.Components.Pages.Models
@using PawfectMatch.Components.Services
@using PawfectMatch.Components.Layout
@using PawfectMatch.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject PawfectMatchContext DbContext
@rendermode InteractiveServer

<PageTitle>Dog Search</PageTitle>

<h1>Dogs Available for Adoption</h1>

<!-- Filters Section -->
<div>
    <label for="breedFilter">Filter by Breed:</label>
    <select id="breedFilter" @onchange="FilterDogs">
        <option value="">All Breeds</option>
        @foreach (var breed in breeds)
        {
            <option value="@breed">@breed</option>
        }
    </select>
</div>

<div>
    <label for="nameFilter">Search by Name:</label>
    <input id="nameFilter" type="text" @bind="searchName" @oninput="FilterDogs" placeholder="Enter dog name" />
</div>

<div>
    <label for="sizeFilter">Filter by Size:</label>
    <select id="sizeFilter" @onchange="FilterDogs">
        <option value="">All Sizes</option>
        <option value="Small">Small (1-20 lbs)</option>
        <option value="Medium">Medium (21-50 lbs)</option>
        <option value="Large">Large (51+ lbs)</option>
    </select>
</div>

<!-- Dogs Grid -->
<div class="dog-grid">
    @foreach (var dog in filteredDogs)
    {
        <div class="dog-card">
            <img src="@dog.ImageUrl" alt="@dog.Name" class="dog-image" />
            <div class="dog-info">
                <p><strong>Name:</strong> @dog.Name</p>
                <p><strong>Breed:</strong> @dog.Breed</p>
                <p><strong>Age:</strong> @dog.Age</p>
                <p><strong>Size in pounds:</strong> @dog.Size</p>
                <button @onclick="() => NavigateToDetails(dog.Id)">View Dog</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Dog> filteredDogs = new();
    private List<string> breeds = new();
    private string selectedBreed = "";
    private string searchName = "";
    private string selectedSize = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch all available breeds from the database
        breeds = await DbContext.Dog
            .AsNoTracking()
            .Where(d => d.IsAvailable)
            .Select(d => d.Breed)
            .Distinct()
            .ToListAsync();

        // Fetch all available dogs initially
        await LoadFilteredDogsAsync();
    }

    private async Task LoadFilteredDogsAsync()
    {
        IQueryable<Dog> query = DbContext.Dog.AsNoTracking().Where(d => d.IsAvailable);

        if (!string.IsNullOrEmpty(selectedBreed))
        {
            query = query.Where(d => d.Breed == selectedBreed);
        }

        if (!string.IsNullOrEmpty(searchName))
        {
            query = query.Where(d => d.Name.Contains(searchName, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedSize))
        {
            query = query.Where(d => GetSizeCategory(d.Size) == selectedSize);
        }

        filteredDogs = await query.ToListAsync();
    }

    private async Task FilterDogs(ChangeEventArgs e)
    {
        // Determine which filter triggered the event
        var selectedValue = e.Value?.ToString();

        if (e.Value != null)
        {
            if (selectedValue == selectedBreed)
            {
                selectedBreed = selectedValue;
            }
            else if (selectedValue == searchName)
            {
                searchName = selectedValue;
            }
            else if (selectedValue == selectedSize)
            {
                selectedSize = selectedValue;
            }
        }

        // Apply the new filters
        await LoadFilteredDogsAsync();
    }

    private string GetSizeCategory(int size)
    {
        if (size <= 20) return "Small";
        if (size <= 50) return "Medium";
        return "Large";
    }

    private void NavigateToDetails(int id)
    {
        Navigation.NavigateTo($"/dogdetails/{id}");
    }
}

<style>
    .dog-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .dog-card {
        background: #CF9FFF;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .dog-image {
        width: 100%;
        height: auto;
        max-height: 200px;
        object-fit: cover;
        border-radius: 8px;
    }

    .dog-info p {
        margin: 5px 0;
    }

    button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button:hover {
            background-color: #0056b3;
        }
</style>
