@page "/messaging"
@using PawfectMatch.Components.Services

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IMessagingBrokerClient client

<h2 class="text-center mt-4">Messaging</h2>

<!-- Messaging Producer Section -->
<div class="card mt-4">
    <div class="card-header bg-primary text-white">
        <h3>Send a Message</h3>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" @bind-Value="userEmail" class="form-control" placeholder="Enter your email" />
        </div>
        <div class="mb-3">
            <label for="subject" class="form-label">Subject:</label>
            <InputText id="subject" @bind-Value="topicName" class="form-control" placeholder="Enter a subject" />
        </div>
        <div class="mb-3">
            <label for="message" class="form-label">Message:</label>
            <InputTextArea id="message" @bind-Value="messageContent" rows="5" class="form-control" placeholder="Write your message here"></InputTextArea>
        </div>
        <div class="d-flex align-items-center">
            <Spinner Class="me-3" Visible="isLoading" Type="SpinnerType.Dots" Color="SpinnerColor.Danger" Size="SpinnerSize.Medium" />
            <Button Color="ButtonColor.Primary" Disabled="@(string.IsNullOrEmpty(userEmail) || string.IsNullOrEmpty(topicName) || string.IsNullOrEmpty(messageContent))" @onclick="publish">
                <i class="fas fa-paper-plane"></i> Send
            </Button>
        </div>
    </div>
</div>

<!-- Sent Messages Section -->
<div class="card mt-4">
    <div class="card-header bg-success text-white">
        <h3>Your Sent Messages</h3>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label for="searchSubject" class="form-label">Search by Subject:</label>
            <InputText id="searchSubject" @bind-Value="searchSubject" class="form-control" placeholder="Enter a subject to search" />
        </div>
        <ul class="list-group list-group-flush">
            @foreach (var message in FilteredMessages)
            {
                <li class="list-group-item">
                    <strong>From:</strong> @message.Email <br />
                    <strong>Subject:</strong> @message.Subject <br />
                    <strong>Message:</strong> @message.Content <br />
                    <small class="text-muted">@message.Timestamp.ToString("g")</small>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private bool isLoading = false;

    // User input fields
    private string? userEmail = string.Empty;
    private string? topicName = string.Empty;
    private string? messageContent = string.Empty;

    // Search functionality
    private string? searchSubject = string.Empty;

    // Message storage
    private List<Message> sentMessages = new();

    // Data structure for storing messages
    private record Message(string Email, string Subject, string Content, DateTime Timestamp);

    // Filtered messages based on search
    private IEnumerable<Message> FilteredMessages => string.IsNullOrEmpty(searchSubject)
        ? sentMessages
        : sentMessages.Where(m => m.Subject.Contains(searchSubject, StringComparison.OrdinalIgnoreCase));

    private async Task publish()
    {
        isLoading = true;
        try
        {
            var result = await client.PublishAsync(topicName!, messageContent!);
            // Add the message to the sent messages list
            sentMessages.Add(new Message(userEmail!, topicName!, messageContent!, DateTime.Now));
            events.Add(new EventTrack(DateTime.Now, topicName! + " topic", "Published new message"));
        }
        catch (Exception ex)
        {
            events.Add(new EventTrack(DateTime.Now, "Error", ex.Message, true));
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Events for debug purposes
    record EventTrack(DateTime EventTime, string Topic, string Message, bool IsError = false);
    private List<EventTrack> events = new();
}